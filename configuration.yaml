
# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

sensor: !include esp-test/sensor.yaml

lovelace:
  mode: storage
  # Add yaml dashboards
  dashboards:
    lovelace-yaml:
      mode: yaml
      title: BKK
      icon: mdi:bus
      show_in_sidebar: true
      filename: esp-test/dashboard.yaml

#Weatherman
template:

  - sensor:
      - name: "Mandula Bus 0 In"
        state: >                    
          {{ state_attr('sensor.bkk_mandula', 'vehicles')[0].in }}
      - name: "Mandula Bus 1 In"
        state: >                    
          {{ state_attr('sensor.bkk_mandula', 'vehicles')[1].in }}
      - name: "Mandula Bus 2 In"
        state: >                    
          {{ state_attr('sensor.bkk_mandula', 'vehicles')[2].in }}
      - name: "Mandula Bus 3 In"
        state: >                    
          {{ state_attr('sensor.bkk_mandula', 'vehicles')[3].in }}
      - name: "Mandula Bus 4 In"
        state: >                    
          {{ state_attr('sensor.bkk_mandula', 'vehicles')[4].in }}
      - name: "Mandula Next Buses"
        state: >                    
          {{ state_attr('sensor.bkk_mandula', 'vehicles')[0].in }}{% if has_value('sensor.mandula_bus_1_in') %}, {{ state_attr('sensor.bkk_mandula', 'vehicles')[1].in }}{% if has_value('sensor.mandula_bus_2_in') %}, {{ state_attr('sensor.bkk_mandula', 'vehicles')[2].in }}{% if has_value('sensor.mandula_bus_3_in') %}, {{ state_attr('sensor.bkk_mandula', 'vehicles')[3].in }}{% if has_value('sensor.mandula_bus_4_in') %}, {{ state_attr('sensor.bkk_mandula', 'vehicles')[4].in }}{% endif %}{% endif %}{% endif %}{% endif %}

  # Bundle up all the data to send over to Weatherman (ESPHome device).

  - trigger:
      platform: time_pattern
      minutes: "/1"
    action:
      - service: weather.get_forecast
        target:
          entity_id: weather.forecast_home
        data:
          type: hourly
        response_variable: weather_valhalla_hourly  

    sensor:
      - name: Weatherman Data
        state: "OK"
        attributes:

          weather_condition_now: >
            {% set cond_now = states('weather.valhalla') %}
            {% if states('sun.sun') == 'below_horizon' %}
                {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
            {% else %}
                {{ cond_now }}
            {% endif %}

          weather_condition_0: >
            {% set cond0 = weather_valhalla_hourly.forecast[0].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond0_time = as_timestamp(weather_valhalla_hourly.forecast[0].datetime) %}
            {% if cond0_time < next_rising and next_rising < next_setting %}
                {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
            {% else %}
                {{ cond0 }}
            {% endif %}
          weather_temperature_0: >
            {{ weather_valhalla_hourly.forecast[0].temperature | round }}
          weather_timestamp_0: >
            {{ as_timestamp(weather_valhalla_hourly.forecast[0].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(weather_valhalla_hourly.forecast[0].datetime) | timestamp_custom('%p') }}

          weather_condition_1: >
            {% set cond1 = weather_valhalla_hourly.forecast[1].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond1_time = as_timestamp(weather_valhalla_hourly.forecast[1].datetime) %}
            {% if cond1_time < next_rising and next_rising < next_setting %}
                {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
            {% else %}
                {{ cond1 }}
            {% endif %}
          weather_temperature_1: >
            {{ weather_valhalla_hourly.forecast[1].temperature | round }}
          weather_timestamp_1: >
            {{ as_timestamp(weather_valhalla_hourly.forecast[1].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(weather_valhalla_hourly.forecast[1].datetime) | timestamp_custom('%p') }}

          weather_condition_2: >
            {% set cond2 = weather_valhalla_hourly.forecast[2].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond2_time = as_timestamp(weather_valhalla_hourly.forecast[2].datetime) %}
            {% if cond2_time < next_rising and next_rising < next_setting %}
                {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
            {% else %}
                {{ cond2 }}
            {% endif %}
          weather_temperature_2: >
            {{ weather_valhalla_hourly.forecast[2].temperature | round }}
          weather_timestamp_2: >
            {{ as_timestamp(weather_valhalla_hourly.forecast[2].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(weather_valhalla_hourly.forecast[2].datetime) | timestamp_custom('%p') }}

          weather_condition_3: >
            {% set cond3 = weather_valhalla_hourly.forecast[3].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond3_time = as_timestamp(weather_valhalla_hourly.forecast[3].datetime) %}
            {% if cond3_time < next_rising and next_rising < next_setting %}
                {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
            {% else %}
                {{ cond3 }}
            {% endif %}
          weather_temperature_3: >
            {{ weather_valhalla_hourly.forecast[3].temperature | round }}
          weather_timestamp_3: >
            {{ as_timestamp(weather_valhalla_hourly.forecast[3].datetime) | timestamp_custom('%I') | int }} {{ as_timestamp(weather_valhalla_hourly.forecast[3].datetime) | timestamp_custom('%p') }}
